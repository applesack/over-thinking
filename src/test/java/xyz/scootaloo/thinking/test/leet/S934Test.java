package xyz.scootaloo.thinking.test.leet;

import org.junit.jupiter.api.Test;
import xyz.scootaloo.thinking.leet.S934;
import xyz.scootaloo.thinking.utils.ToolBox;

/**
 * @author AppleSack
 * @since 2023/03/19
 */
public class S934Test {

    private final S934 solution = new S934();

    @Test
    public void test() {
        System.out.println(solution.shortestBridge(ToolBox.parse2dIntArray("""
                [[0,1],[1,0]]
                """))); // 1

        System.out.println(solution.shortestBridge(ToolBox.parse2dIntArray("""
                [[0,1,0],[0,0,0],[0,0,1]]
                """))); // 2

        System.out.println(solution.shortestBridge(ToolBox.parse2dIntArray("""
                [[1,1,1,1,1],
                 [1,0,0,0,1],
                 [1,0,1,0,1],
                 [1,0,0,1,1],
                 [1,1,1,1,1]]
                """))); // 1

        ToolBox.measureTimeMillis(() -> {
            System.out.println(solution.shortestBridge(ToolBox.parse2dIntArray("""
                [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                 [0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                 [0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0],
                 [0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],
                 [0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0],
                 [1,0,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0],
                 [1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0],
                 [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
                 [1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0],
                 [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
                 [1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0],
                 [1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
                 [1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,0],
                 [1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0],
                 [1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1],
                 [1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0],
                 [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0],
                 [1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0],
                 [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0]]
                """))); // 1
        });
    }

    @Test
    public void test1() {
        ToolBox.measureTimeMillis(() -> {
            System.out.println(solution.shortestBridge(ToolBox.parse2dIntArray("""
                [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                 [0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
                 [0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0],
                 [0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],
                 [0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0],
                 [1,0,1,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0],
                 [1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0],
                 [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
                 [1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0],
                 [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
                 [1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0],
                 [1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
                 [1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,0],
                 [1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0],
                 [1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1],
                 [1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0],
                 [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0],
                 [1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0],
                 [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0]]
                """))); // 1
        });
    }

}
